<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<documents>
    <document uid="b6ea9a7318adf2e91129a18df5a8a8b4">
        <field name="title"><![CDATA[Wicked Charts - JavaScript Charts mit Apache Wicket]]></field>
        <field name="subline"><![CDATA[]]></field>
        <field name="teaser"><![CDATA[<p>Bei der Entwicklung einer Anwendung mit einem serverseitigen Webframework stellt die 
benutzerfreundliche und interaktive Visualisierung von Daten eine Herausforderung dar. 
Die Verwendung von Wicked Charts - einer bei adesso entwickelten Open Source Java-Bibliothek - ermöglicht es, schöne und interaktive JavaScript-Charts in eine serverseitige Webanwendung zu integrieren. 
In diesem Artikel wird dazu beispielhaft gezeigt, wie ein einfaches Liniendiagramm konfiguriert wird.</p>

]]></field>
        <field name="language_multi_keyword"><![CDATA[de]]></field>
        <field name="content_type_multi_keyword"><![CDATA[blog]]></field>
        <field name="mime_type_multi_keyword"><![CDATA[text/html]]></field>
        <field name="category_multi_keyword"><![CDATA[Softwareentwicklung]]></field>
        <field name="tag_multi_keyword"><![CDATA[Java]]></field>
        <field name="tag_multi_keyword"><![CDATA[Wicket]]></field>
        <field name="date_date"><![CDATA[2018-07-16T08:50:00+02:00]]></field>
        <field name="date_l"><![CDATA[1531723800000]]></field>
        <field name="change_date"><![CDATA[1615211400000]]></field>
        <!--Picture-->
        <!-- Not in use at the moment-->
        <!--Author Information-->
        <field name="author_first_name"><![CDATA[Maksim]]></field>
        <field name="author_last_name"><![CDATA[Atanasov]]></field>
        <field name="author_id"><![CDATA[maximAtanasov]]></field>
        <field name="author_picture_stored_only"><![CDATA[http://localhost:4000/assets/images/avatars/maximAtanasov.jpg]]></field>
        <!--Postcontent-->
        <field name="headlines"><![CDATA[Wicked Charts - JavaScript Charts mit Apache Wicket]]></field>
        <field name="display_content"><![CDATA[<div class="i2-intro p-t-1">
            <p>Bei der Entwicklung einer Anwendung mit einem serverseitigen Webframework stellt die 
benutzerfreundliche und interaktive Visualisierung von Daten eine Herausforderung dar. 
Die Verwendung von Wicked Charts - einer bei adesso entwickelten Open Source Java-Bibliothek - ermöglicht es, schöne und interaktive JavaScript-Charts in eine serverseitige Webanwendung zu integrieren. 
In diesem Artikel wird dazu beispielhaft gezeigt, wie ein einfaches Liniendiagramm konfiguriert wird.</p>

</div>]]></field>
        <field name="content"><![CDATA[<div class="adesso-text-formate">
<div class="row p-t-2">
<div class="adesso-container">
<div class="col-xl-8 adesso-center p-b-1 p-l-0 p-r-0">
    <p>Bei der Entwicklung einer Anwendung mit einem serverseitigen Webframework stellt die 
benutzerfreundliche und interaktive Visualisierung von Daten eine Herausforderung dar. 
Die Verwendung von Wicked Charts - einer bei adesso entwickelten Open Source Java-Bibliothek - ermöglicht es, schöne und interaktive JavaScript-Charts in eine serverseitige Webanwendung zu integrieren. 
In diesem Artikel wird dazu beispielhaft gezeigt, wie ein einfaches Liniendiagramm konfiguriert wird.</p>

<h5 id="wofür-brauchen-wir-wicked-charts">Wofür brauchen wir Wicked Charts?</h5>

<p>Bei der Entwicklung einer serverseitigen Webanwendung möchten wir eigentlich die volle Kontrolle über die UI-Komponenten
im serverseitigen Code haben - ansonsten müssen wir neben dem serverseitigen Framework noch ein clientseitiges JavaScript Framework einsetzen. Die Java-Library Wicked Charts ermöglicht es, Diagramme im Java-Code zu konfigurieren und sie mit Daten zu versorgen,
ohne JavaScript-Code zu schreiben oder die Besonderheiten der jeweiligen JavaScript-Bibliothek im Detail zu kennen. 
Dies ermöglicht eine ungestreute Codebasis, die leichter zu lesen, verstehen und modifizieren ist.</p>

<h5 id="überblick-über-wicked-charts">Überblick über Wicked Charts</h5>

<p><a href="https://github.com/adessoAG/wicked-charts">Wicked Charts</a> ist ein Java-Wrapper für die beiden JavaScript Bibliotheken <a href="http://www.chartjs.org/">Chart.js</a> und <a href="https://www.highcharts.com/">Highcharts</a>.
Es wurde ursprünglich als Wrapper für die Highcharts Bibliothek entwickelt 
und wegen dem Lizenzmodell von Highcharts auch um Chart.js erweitert, und unterstützt die meisten Features der JavaScript-Bibliotheken
Die Bibliothek enthält Module für alle aktuellen Versionen von Apache Wicket sowie für das JSF Framework. Darüberhinaus kann der Java-Wrapper auch direkt genutzt werden, um JavaScript-Charts aus anderen serverseitige Webframeworks heraus zu erzeugen.</p>

<h5 id="wicked-charts-am-beispiel-ein-liniendiagramm">Wicked Charts am Beispiel: Ein Liniendiagramm</h5>

<p>Als anschauliches Beispiel erstellen wir im Folgenden ein Liniendiagramm mit Wicked Charts.</p>

<h6 id="einbindung-über-maven">Einbindung über Maven</h6>
<p>Zunächst müssen wir Wicked Charts in unsere Anwendung einbinden. Dies sind die dazu notwendigen Maven-Koordinaten:</p>

<pre><code class="language-xml">&lt;dependency&gt;
  &lt;groupId&gt;de.adesso.wicked-charts&lt;/groupId&gt;
  &lt;artifactId&gt;wicked-charts-wicket7&lt;/artifactId&gt;
  &lt;version&gt;3.0.0&lt;/version&gt;
  &lt;type&gt;pom&lt;/type&gt;
&lt;/dependency&gt;
</code></pre>

<p>Eine Wicket-Anwedung, die folgendes minimales Beispiel umsetzt ist hier zu finden: <a href="https://github.com/maximAtanasov/wicked-charts-example">GitHub</a>.</p>

<p>Zum Starten der Anwendung einfach <code>./gradlew bootRun</code> im Hauptverzeichnis ausführen und dann die URL <code>localhost:8080</code> in einem Browser öffnen.</p>

<h6 id="konfiguration-des-diagramms">Konfiguration des Diagramms</h6>

<p>Der hier beschriebene Java Code zur Konfiguration des Diagramms ist in der Datei <code>Homepage.java</code> Datei in der Beispiel-Anwendung zu finden.</p>

<p>Zur Konfiguration eines Charts.js - Diagramms erzeugen wir ein Objekt der Klasse <code>ChartConfiguration</code> wie folgt:</p>

<pre><code class="language-java">ChartConfiguration chartConfiguration = new ChartConfiguration();
chartConfiguration.setType(ChartType.LINE);
</code></pre>

<p>Die Achsenbeschriftungen und Datensätze geben wir über ein <code>Data</code>-Objekt mit:</p>

<pre><code class="language-java">Data data = new Data().setLabels(TextLabel.of("January", "February", "March", "April", "May", "June", "July"));
</code></pre>

<p>Die eigentlichen Datensätze geben wir mit, indem wir ein <code>Dataset</code> erzeugen:</p>

<pre><code class="language-java">Dataset dataset1 = new Dataset()
    .setLabel("My first dataset")  //Ein Label für den Datensatz
    .setBackgroundColor(SimpleColor.BLUE) //Es eine Farbe aus dem SimpleColor Enum gewählt werden. Dieses Enum enthält einige der am häufigsten verwendeten Farben.
    .setBorderColor(new RgbaColor(54, 162, 235, 255)) //Es kann auch eine eigene Farbe mit den Klassen RgbaColor/HexColor definiert werden.
    .setData(IntegerValue.of(6,7,9,2,9,1,3)) //Hier werden die eigentlichen Datenpunkte gesetzt.
    .setFill(false);

data.setDatasets(Arrays.asList(dataset1));
chartConfiguration.setData(data);
</code></pre>

<p>Damit das Diagramm auch so aussieht, wie wir es uns vorstellen, können wir über ein <code>Options</code>-Objekt noch jede Menge Einstellungen definieren, die das Look &amp; Feel beeinflussen:</p>

<pre><code class="language-java">Options options = new Options()
        .setResponsive(true)
        .setTitle(new Title()
                .setDisplay(true)
                .setText("Chart.js Line Chart")) //Der Titel des Diagramms.
        .setTooltips(new Tooltips() //Tooltips werden erstellt (Diese werden beim Überfahren eines Datenpunktes angezeigt)
                .setMode(TooltipMode.INDEX)
                .setIntersect(false))
        .setHover(new Hover()
                .setMode(HoverMode.NEAREST)
                .setIntersect(true))
        .setScales(new Scales()
                .setXAxes(new AxesScale() //Konfigurieren der X-Achse
                        .setDisplay(true)
                        .setScaleLabel(new ScaleLabel()
                                .setDisplay(true)
                                .setLabelString("Month")))
                .setYAxes(new AxesScale() //Und die Y-Achse
                        .setTicks(new Ticks()
                                .setMax(10) //Die Achse zeigt nur Werte im Bereich 0-10
                                .setMin(0))
                        .setDisplay(true)
                        .setScaleLabel(new ScaleLabel()
                                .setDisplay(true)
                                .setLabelString("Value"))));

chartConfiguration.setOptions(options);
</code></pre>

<h6 id="einbindung-des-diagramms-in-eine-wicket-komponente">Einbindung des Diagramms in eine Wicket-Komponente</h6>

<p>Die <code>ChartConfiguration</code> definiert nun die Daten und das Aussehen unseres Diagramms und soll nun in einer Wicket-Webanwendung dargestellt werden. Hierzu nutzen wir die von Wicked Charts bereitgestellte <code>Chart</code>-Komponente, die wir in der Seite <code>Homepage.java</code> mittels <code>add()</code> hinzufügen:</p>

<pre><code class="language-java">Chart chart = new Chart("chart", chartConfiguration);
add(chart);
</code></pre>

<p>Das HTML für die Homepage-Seite befindet sich in der Datei <code>Homepage.html</code> und sieht so aus:</p>

<pre><code class="language-html">&lt;div style="width: 75%"&gt;
    &lt;canvas wicket:id="chart"&gt;&lt;/canvas&gt;
&lt;/div&gt;
</code></pre>

<h6 id="das-fertige-diagramm">Das fertige Diagramm</h6>

<p>Das oben konfigurierte Diagramm sollte in der laufenden Webanwendung dann so aussehen:</p>

<p><img src="/assets/images/posts/wicked-charts/LineChart.png" alt="" /></p>

<h5 id="was-wicked-charts-noch-kann">Was Wicked Charts noch kann</h5>

<p>Was die Konfiguration von Diagrammen angeht unterstützt Wicked Charts fast alle Features, die auch von den JavaScript-Bibliotheken angeboten werden. So können zum Beispiel mehrere Y-Achsen definiert werden, wie in diesem Beispiel:</p>

<p><img src="/assets/images/posts/wicked-charts/barMultiAxis.png" alt="" /></p>

<p>Oder wir können verschiedene Diagrammtypen kombinieren, wie hier z.B. ein Balken- und ein Liniendiagramm:</p>

<p><img src="/assets/images/posts/wicked-charts/comboBar.png" alt="" /></p>

<p>Die Diagramme haben auch viele Variationen mit verschiedenen Einstellungen und Funktionen.
Es können z. B. gestapelte Diagramme, verschiedene Füllmodi und verschiedene Punkt- oder Linienstile, sowie
benutzerdefinierte Funktionen eingefügt werden.</p>

<p>Die Bibliothek unterstützt auch folgedene Diagrammtypen:</p>

<ul>
  <li>Balkendiagramme</li>
  <li>Radardiagramme</li>
  <li>Streudiagramme</li>
  <li>Tortendiagramme</li>
  <li>Doughnut Diagramme</li>
  <li>Polargebietskarten</li>
  <li>Blasendiagramme</li>
</ul>

<h5 id="was-wicked-charts-nicht-kann">Was Wicked Charts nicht kann</h5>

<p>Wicked Charts bietet eine Java-Abstraktion über JavaScript-Frameworks. Wie bei jeder Abstraktion geht dabei etwas verloren. So unterstützt Wicked Charts z.B. Funktionen zu begrenzt, die eine Client-Server-Interaktion erfordern. Für die Darstellung statischer Daten mit einigen clientseitigen Interaktions-Features bietet Wicked Charts aber eine gute Möglichkeit.</p>

<h5 id="showcase">Showcase</h5>

<p>Die Wicked Charts Showcase Anwendung enthält praktische Code-Samples zum Durchblättern und kann aus dem Wicked Charts-Repository heruntergeladen oder <a href="https://wicked-charts-showcase.appspot.com">hier</a> angesehen werden.</p>

</div>
</div>
</div>
</div>]]></field>
    </document>
</documents>
